## Structure of the project
.
â”œâ”€â”€ package.json
â”œâ”€â”€ src
â”‚Â Â  â”œâ”€â”€ app.css
â”‚Â Â  â”œâ”€â”€ app.d.ts
â”‚Â Â  â”œâ”€â”€ app.html
â”‚Â Â  â””â”€â”€ routes
â”‚Â Â      â”œâ”€â”€ +layout.svelte
â”‚Â Â      â”œâ”€â”€ +page.svelte
â”‚Â Â      â””â”€â”€ flags.ts
â”œâ”€â”€ static
â”œâ”€â”€ svelte.config.js
â”œâ”€â”€ tsconfig.json
â””â”€â”€ vite.config.ts

4 directories, 10 files

## Project code:
**./.npmrc**
```
engine-strict=true
resolution-mode=highest

```

**./package.json**
```
{
	"name": "matchinggame",
	"version": "0.0.1",
	"private": true,
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch"
	},
	"devDependencies": {
		"@sveltejs/adapter-auto": "^2.0.0",
		"@sveltejs/kit": "^1.20.4",
		"svelte": "^4.0.5",
		"svelte-check": "^3.4.3",
		"tslib": "^2.4.1",
		"typescript": "^5.0.0",
		"vite": "^4.4.2"
	},
	"type": "module",
	"dependencies": {
		"@fontsource/poppins": "^5.0.8"
	}
}

```

**./src/app.css**
```
@import "@fontsource/poppins";

* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

:root {
	--txt-1: hsl(220 10% 98%);
	--bg-1: hsl(220 20% 10%);
	--bg-2: hsl(220 20% 20%);
	--border: hsl(180 100% 50%);
	--pulse: hsl(9 100% 64%);
}

html,
body {
	height: 100%;
}

body {
	display: grid;
	place-content: center;
	padding: 2rem;
	font-family: "Poppins", sans-serif;
	color: var(--txt-1);
	background-color: var(--bg-1);
}

h1 {
	font-size: 4rem;
	text-align: center;
	text-transform: capitalize;
}

h1 + button {
	width: max-content;
	margin-top: 2rem;
	margin-inline: auto;
	border: 4px solid var(--border);
}

button {
	padding: 1.5rem;
	font-size: 2rem;
	font-weight: 900;
	color: inherit;
	background: none;
	border-radius: 8px;
	border: none;
	text-transform: uppercase;
	cursor: pointer;
}

```

**./src/app.d.ts**
```
// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface Platform {}
	}
}

export {};

```

**./src/app.html**
```
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

```

**./src/routes/+layout.svelte**
```
<script lang="ts">
    import '../app.css'
</script>

<svelte:head>
    <title>Matching Game</title>
</svelte:head>

<slot/>
```

**./src/routes/+page.svelte**
```
<script lang="ts">
	import { flags } from "./flags";
	type State = "start" | "playing" | "paused" | "won" | "lost";

	let state: State = "start";
	let size = 20;
	let grid = createGrid();
	let maxMatches = grid.length / 2;
	let selected: number[] = [];
	let matches: string[] = [];
	let timerId: number | null = null;
	let time = 45;

	function runGameTimer() {
		function countdown() {
			state !== "paused" && (time -= 1);
		}

		timerId = setInterval(countdown, 1000);
	}

	function resetGame() {
		timerId && clearInterval(timerId);
		grid = createGrid();
		maxMatches = grid.length / 2;
		selected = [];
		matches = [];
		timerId = null;
		time = 45;
	}

	function createGrid() {
		let cards = new Set<string>();
		let maxSize = size / 2;

		while (cards.size < maxSize) {
			const randomIndex = Math.floor(Math.random() * flags.length);
			cards.add(flags[randomIndex]);
		}

		return shuffle([...cards, ...cards]);
	}

	function shuffle<Items>(items: Items[]) {
		return items.sort(() => Math.random() - 0.5);
	}

	function selectCard(cardIndex: number) {
		selected = selected.concat(cardIndex);
	}

	function matchCards() {
		const [first, second] = selected;

		if (grid[first] === grid[second]) {
			matches = matches.concat(grid[first]);
		}

		setTimeout(() => {
			selected = [];
		}, 300);
	}

	function gameWon() {
		state = "won";
		resetGame();
	}

	function gameLost() {
		state = "lost";
		resetGame();
	}

	function pauseGame(e: KeyboardEvent) {
		if (e.key === "Escape") {
			switch (state) {
				case "playing":
					state = "paused";
					break;
				case "paused":
					state = "playing";
					break;
			}
		}
	}

	$: if (state === "playing") {
		!timerId && runGameTimer();
	}
	$: selected.length === 2 && matchCards();
	$: maxMatches === matches.length && gameWon();
	$: time === 0 && gameLost();
	$: console.log({ state, selected, matches });
</script>

<svelte:window on:keydown={pauseGame} />

{#if state === "start"}
	<h1>Matching game</h1>
	<button on:click={() => (state = "playing")}>Start</button>
{/if}

{#if state === "paused"}
	<h1>Game Paused</h1>
	<button on:click={() => (state = "playing")}>Continue</button>
{/if}

{#if state === "playing"}
	<h1 class="timer" class:pulse={time <= 10}>{time}</h1>

	<div class="matches">
		{#each matches as card}
			<div>{card}</div>
		{/each}
	</div>
	<div class="cards">
		{#each grid as card, cardIndex}
			{@const isSelected = selected.includes(cardIndex)}
			{@const isSelectedOrMatched =
				selected.includes(cardIndex) || matches.includes(card)}
			{@const match = matches.includes(card)}

			<button
				class="card"
				class:selected={isSelected}
				class:flip={isSelectedOrMatched}
				disabled={isSelectedOrMatched}
				on:click={() => selectCard(cardIndex)}
			>
				<div class:match class="back">{card}</div>
			</button>
		{/each}
	</div>
{/if}

{#if state === "lost"}
	<h1>You lost! ðŸ’©</h1>
	<button on:click={() => (state = "playing")}>Play again</button>
{/if}

{#if state === "won"}
	<h1>You Won! ðŸ¤©</h1>
	<button on:click={() => (state = "playing")}>Play again</button>
{/if}

<style>
	.cards {
		display: grid;
		grid-template-columns: repeat(5, 1fr);
		gap: 0.4rem;
	}

	.card {
		height: 140px;
		width: 140px;
		font-size: 4rem;
		background-color: var(--bg-2);
		transition: rotate 0.3s ease-out;
		transform-style: preserve-3d;

		&.selected {
			border: 4px solid var(--border);
			background-color: var(--bg-3);
		}

		& .match {
			transition: opacity 0.3s ease-out;
			opacity: 0.4;
		}

		&.flip {
			rotate: y 180deg;
			pointer-events: none;
		}

		& .back {
			backface-visibility: hidden;
			rotate: y 180deg;
		}
	}

	.matches {
		display: flex;
		gap: 1rem;
		margin-block: 2rem;
		font-size: 3rem;
	}

	.timer {
		transition: color 0.3s ease;
	}

	.pulse {
		color: var(--pulse);
		animation: pulse 1s infinite ease;
	}

	@keyframes pulse {
		to {
			scale: 1.2;
		}
	}
</style>

```

**./src/routes/flags.ts**
```
export const flags = [
	"ðŸ‡§ðŸ‡´",
	"ðŸ‡§ðŸ‡·",
	"ðŸ‡¨ðŸ‡¦",
	"ðŸ‡¨ðŸ‡±",
	"ðŸ‡¨ðŸ‡´",
	"ðŸ‡¨ðŸ‡º",
	"ðŸ‡ªðŸ‡¨",
	"ðŸ‡«ðŸ‡°",
	"ðŸ‡¬ðŸ‡©",
	"ðŸ‡¬ðŸ‡«",
	"ðŸ‡¬ðŸ‡µ",
	"ðŸ‡¬ðŸ‡¹",
	"ðŸ‡¬ðŸ‡¾",
	"ðŸ‡­ðŸ‡³",
	"ðŸ‡¯ðŸ‡²",
	"ðŸ‡²ðŸ‡«",
	"ðŸ‡²ðŸ‡½",
	"ðŸ‡³ðŸ‡®",
	"ðŸ‡µðŸ‡¦",
	"ðŸ‡µðŸ‡ª",
	"ðŸ‡µðŸ‡²",
	"ðŸ‡µðŸ‡·",
	"ðŸ‡µðŸ‡¾",
	"ðŸ‡ºðŸ‡¸",
	"ðŸ‡ºðŸ‡¾",
	"ðŸ‡»ðŸ‡ª",
	"ðŸ‡»ðŸ‡¬",
];

```

**./svelte.config.js**
```
import adapter from "@sveltejs/adapter-auto";
import { vitePreprocess } from "@sveltejs/kit/vite";

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://kit.svelte.dev/docs/integrations#preprocessors
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
		// If your environment is not supported or you settled on a specific environment, switch out the adapter.
		// See https://kit.svelte.dev/docs/adapters for more information about adapters.
		adapter: adapter(),
	},
};

export default config;

```

**./tsconfig.json**
```
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true
	}
	// Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

```

**./vite.config.ts**
```
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit()]
});

```

